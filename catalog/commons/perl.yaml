hooks:

  postinst:
    remediate: installation
    check: perl_links
    description: |
      Setup perl binaries links.
    # TEMPORARY: This code must be reviewed.
    actions:
      - |-
        source /lib/gentoo/functions.sh

        EBUILD_PHASE=postinst
        EROOT=${EROOT:-/}

        dual_scripts() {
          src_remove_dual      perl-core/Archive-Tar        2.360.0       ptar ptardiff ptargrep
          src_remove_dual      perl-core/CPAN               2.270.0       cpan
          src_remove_dual      perl-core/Digest-SHA         6.20.0        shasum
          src_remove_dual      perl-core/Encode             3.60.0        enc2xs piconv
          src_remove_dual      perl-core/ExtUtils-MakeMaker 7.440.0       instmodsh
          src_remove_dual      perl-core/ExtUtils-ParseXS   3.400.0       xsubpp
          src_remove_dual      perl-core/IO-Compress        2.93.0        zipdetails
          src_remove_dual      perl-core/JSON-PP            4.40.0        json_pp
          src_remove_dual      perl-core/Module-CoreList    5.202.6.20    corelist
          src_remove_dual      perl-core/Pod-Checker        1.730.0       podchecker
          src_remove_dual      perl-core/Pod-Perldoc        3.280.100     perldoc
          src_remove_dual      perl-core/Pod-Usage          1.690.0       pod2usage
          src_remove_dual      perl-core/Test-Harness       3.420.0       prove
          src_remove_dual      perl-core/podlators          4.140.0       pod2man pod2text
          src_remove_dual_man  perl-core/podlators          4.140.0       /usr/share/man/man1/perlpodstyle.1
        }

        alternatives_makesym() {
          local ALTERNATIVES=""
          local SYMLINK=""
          local alt pref

          # usage: alternatives_makesym <resulting symlink> [alternative targets..]
          # make sure it is in the prefix, allow it already to be in the prefix
          SYMLINK=${EPREFIX}/${1#${EPREFIX}}
          # this trick removes the trailing / from ${ROOT}
          pref=${ROOT%/}
          shift
          ALTERNATIVES=$@

          # step through given alternatives from first to last
          # and if one exists, link it and finish.
          for alt in ${ALTERNATIVES}; do
            alt=${EPREFIX}/${alt#${EPREFIX}}
            if [ -f "${pref}${alt}" ]; then
                #are files in same directory?
                if [ "${alt%/*}" = "${SYMLINK%/*}" ] ; then
                  #yes; strip leading dirname from alt to create relative symlink
                  einfo "Linking ${alt} to ${pref}${SYMLINK} (relative)"
                  ln -sf ${alt##*/} ${pref}${SYMLINK}
                else
                  #no; keep absolute path
                  einfo "Linking ${alt} to ${pref}${SYMLINK} (absolute)"
                  ln -sf ${pref}${alt} ${pref}${SYMLINK}
                fi
                break
            fi
          done

          # report any errors
          if [ ! -L ${pref}${SYMLINK} ]; then
            ewarn "Unable to establish ${pref}${SYMLINK} symlink"
          else
            # we need to check for either the target being in relative path form
            # or absolute path form
            if [ ! -f "`dirname ${pref}${SYMLINK}`/`readlink ${pref}${SYMLINK}`" -a \
                 ! -f "`readlink ${pref}${SYMLINK}`" ]; then
              ewarn "Removing dead symlink ${pref}${SYMLINK}"
              rm -f ${pref}${SYMLINK}
            fi
          fi
        }

        alternatives_auto_makesym() {
          local SYMLINK REGEX ALT myregex
          SYMLINK=$1
          REGEX=$2
          if [ "${REGEX:0:1}" != "/" ] ; then
            # not an absolute path:
            # inherit the root directory of our main link path for our regex search
            myregex="${SYMLINK%/*}/${REGEX}"
          else
            myregex=${REGEX}
          fi

          # sort a space delimited string by converting it to a multiline list
          # and then run sort -r over it.
          # make sure we use ${EROOT} because otherwise stage-building will break
          ALT="$(for i in $(echo ${EROOT}${myregex}); do echo ${i#${EROOT}}; done | sort -r)"
          alternatives_makesym ${SYMLINK} ${ALT}
        }

        src_remove_dual_file() {
          local i pkg ver
          pkg="$1"
          ver="$2"
          shift 2
          case "${EBUILD_PHASE:-none}" in
            postinst|postrm)
              for i in "$@" ; do
                alternatives_auto_makesym "${i}" "${i}-[0-9]*"
              done
              ;;
            setup)
              for i in "$@" ; do
                if [[ -f ${EROOT}${i} && ! -h ${EROOT}${i} ]] ; then
                  has_version ${pkg} && ewarn "You must reinstall ${pkg} !"
                  break
                fi
              done
              ;;
            install)
              for i in "$@" ; do
                if ! [[ -f "${ED}"${i} ]] ; then
                  ewarn "${i} does not exist!"
                  continue
                fi
                mv "${ED}"${i}{,-${ver}-${P}} || die
              done
              ;;
          esac
        }

        src_remove_dual_man() {
          local i pkg ver ff
          pkg="$1"
          ver="$2"
          shift 2
          case "${EBUILD_PHASE:-none}" in
            postinst|postrm)
              for i in "$@" ; do
                ff=`echo "${EROOT}${i%.[0-9]}-${ver}-${P}${i#${i%.[0-9]}}"*`
                ff=${ff##*${i#${i%.[0-9]}}}
                alternatives_auto_makesym "${i}${ff}" "${i%.[0-9]}-[0-9]*"
              done
              ;;
            install)
              for i in "$@" ; do
                if ! [[ -f "${ED}"${i} ]] ; then
                  ewarn "${i} does not exist!"
                  continue
                fi
                mv "${ED}"${i} "${ED}"${i%.[0-9]}-${ver}-${P}${i#${i%.[0-9]}} || die
              done
              ;;
          esac
        }

        src_remove_dual() {
          local i pkg ver
          pkg="$1"
          ver="$2"
          shift 2
          for i in "$@" ; do
            src_remove_dual_file  "${pkg}" "${ver}" "/usr/bin/${i}"
            src_remove_dual_man   "${pkg}" "${ver}" "/usr/share/man/man1/${i}.1"
          done
        }

        dual_scripts

entrypoint:
  - /bin/sh
  - -c
